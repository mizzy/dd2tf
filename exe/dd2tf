#!/usr/bin/env ruby

require 'dd2tf'
require 'thor'
require 'dogapi'

module Dd2tf

  module Util
    def self.included klass
      klass.class_eval do
        class_option(:dd_api_key, desc: "api key")
        class_option(:dd_app_key, desc: "app key")
      end
    end

    def client
      instance_variable_get_or_set("@client",
                                   ::Dogapi::Client.new(ENV['DATADOG_API_KEY'], ENV['DATADOG_APP_KEY']))
    end

    private

    def instance_variable_get_or_set(name, object)
      instance_variable_get(name) || instance_variable_set(name, object)
    end
  end

  class Print < Thor
    include Util

    desc "user", "ipmort user resource to tfstate"
    def user
      puts ::Dd2tf::Import::User.new(client).print
    end

    desc "downtime", "ipmort downtime resource to tfstate"
    def downtime
      puts ::Dd2tf::Import::Downtime.new(client).print
    end

    desc "monitor", "ipmort monitor resource to tfstate"
    def monitor
      puts ::Dd2tf::Import::Monitor.new(client).print
    end

    desc "timeboard", "ipmort timeboard resource to tfstate"
    def timeboard
      puts ::Dd2tf::Import::Timeboard.new(client).print
    end

    desc "screenboard", "ipmort screenboard resource to tfstate"
    def screenboard
      puts ::Dd2tf::Import::Screenboard.new(client).print
    end
  end

  class Tf < Thor
    include Util

    desc "monitor", "puts monitor config"
    def monitor
      puts ::Dd2tf::Monitor.new(client).output
    end

    desc "timeboard", "puts timeboard config"
    def timeboard
      puts ::Dd2tf::Timeboard.new(client).output
    end

    desc "user", "puts user config"
    def user
      puts ::Dd2tf::User.new(client).output
    end

    desc "screenboard", "puts screenboard config"
    def screenboard
      puts ::Dd2tf::Screenboard.new(client).output
    end
  end

  class Cli < Thor
    include Thor::Actions
    include Util


    desc "print [resource]",
         "Print resources importing command for outputting to tfstate.
          [resource] is one of the [monitor, timeboard, user, downtime]"
    subcommand 'print', Print

    desc "tf [resource]",
         "Print resources config terrafom formatted.
          [resource] is one of the [monitor, timeboard, user]"
    subcommand 'tf', Tf

  end
end

Dd2tf::Cli.start
